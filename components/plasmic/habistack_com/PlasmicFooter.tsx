// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hhYAirYt8bU9TEjNgFzExf
// Component: tnj0d_eW4Ts
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconLink from "../../IconLink"; // plasmic-import: AoqJDesXt_v/component
import TextInput from "../../TextInput"; // plasmic-import: mt8AYmIOquuF/component
import Button from "../../Button"; // plasmic-import: Tz4a3lVI6CGf/component

import { useScreenVariants as useScreenVariants_01LSGjai6PPg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 01lSGjai6pPg/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_habistack_com.module.css"; // plasmic-import: hhYAirYt8bU9TEjNgFzExf/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: tnj0d_eW4Ts/css

import LogoIcon from "./icons/PlasmicIcon__Logo"; // plasmic-import: IBdwO7K4X226/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 234Oqlix5xbb/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: fRG7o45wBFgn/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 5jC4HENzcXyn/icon
import TwitterIconIcon from "./icons/PlasmicIcon__TwitterIcon"; // plasmic-import: t5eU7xypoObb/icon
import GithubIconIcon from "./icons/PlasmicIcon__GithubIcon"; // plasmic-import: Fcdq1Ejy4XxN/icon
import FacebookIconIcon from "./icons/PlasmicIcon__FacebookIcon"; // plasmic-import: hdLeuFLK2xdT/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  iconLink?: p.Flex<typeof IconLink>;
  httpsfathymcomtermsOfServices?: p.Flex<"a"> & Partial<LinkProps>;
  httpsfathymcomprivacyPolicy?: p.Flex<"a"> & Partial<LinkProps>;
  httpsfathymcomenterpriseAgreement?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwlowcodeunitcom?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwiotEnsemblecom?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwhabistackcom?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwproadjectcom?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwhabistackcomdocs?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwhabistackcomblog?: p.Flex<"a"> & Partial<LinkProps>;
  supportfathymcom?: p.Flex<"a"> & Partial<LinkProps>;
  textInput?: p.Flex<typeof TextInput>;
  button?: p.Flex<typeof Button>;
  img?: p.Flex<typeof p.PlasmicImg>;
  fathymIt?: p.Flex<typeof IconLink>;
  httpsgithubcomfathym?: p.Flex<typeof IconLink>;
  httpswwwfacebookcomFathymInc?: p.Flex<typeof IconLink>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultFooterProps {
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  dataFetches?: PlasmicFooter__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_01LSGjai6PPg()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox__o4MUa)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__yh9U6)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___3B7Ie)}
        >
          <IconLink
            data-plasmic-name={"iconLink"}
            data-plasmic-override={overrides.iconLink}
            className={classNames("__wab_instance", sty.iconLink)}
            icon={
              <LogoIcon
                className={classNames(projectcss.all, sty.svg__nVuo)}
                role={"img"}
              />
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox___1Gcwe)}>
            <p.PlasmicLink
              data-plasmic-name={"httpsfathymcomtermsOfServices"}
              data-plasmic-override={overrides.httpsfathymcomtermsOfServices}
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.httpsfathymcomtermsOfServices
              )}
              component={Link}
              href={"https://fathym.com/terms-of-services/#" as const}
              platform={"nextjs"}
            >
              {"Terms of Services"}
            </p.PlasmicLink>
          </div>

          <p.PlasmicLink
            data-plasmic-name={"httpsfathymcomprivacyPolicy"}
            data-plasmic-override={overrides.httpsfathymcomprivacyPolicy}
            className={classNames(
              projectcss.a,
              projectcss.__wab_text,
              sty.httpsfathymcomprivacyPolicy
            )}
            component={Link}
            href={"https://fathym.com/privacy-policy/#" as const}
            platform={"nextjs"}
          >
            {"Privacy Policy"}
          </p.PlasmicLink>

          <p.PlasmicLink
            data-plasmic-name={"httpsfathymcomenterpriseAgreement"}
            data-plasmic-override={overrides.httpsfathymcomenterpriseAgreement}
            className={classNames(
              projectcss.a,
              projectcss.__wab_text,
              sty.httpsfathymcomenterpriseAgreement
            )}
            component={Link}
            href={"https://fathym.com/enterprise-agreement/#" as const}
            platform={"nextjs"}
          >
            {"Enterprise Agreement"}
          </p.PlasmicLink>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___9WTvX)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kj2W)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uu6G5
              )}
            >
              {"Products"}
            </div>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwlowcodeunitcom"}
              data-plasmic-override={overrides.httpswwwlowcodeunitcom}
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwlowcodeunitcom
              )}
              component={Link}
              href={"https://www.lowcodeunit.com/" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"LowCodeUnit"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwiotEnsemblecom"}
              data-plasmic-override={overrides.httpswwwiotEnsemblecom}
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwiotEnsemblecom
              )}
              component={Link}
              href={"https://www.iot-ensemble.com/" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"IoT Ensemble"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwhabistackcom"}
              data-plasmic-override={overrides.httpswwwhabistackcom}
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwhabistackcom
              )}
              component={Link}
              href={"https://www.habistack.com/#" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Habistack"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwproadjectcom"}
              data-plasmic-override={overrides.httpswwwproadjectcom}
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwproadjectcom
              )}
              component={Link}
              href={"https://www.proadject.com/#" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"pROADject"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bVuy)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aQKqR
              )}
            >
              {"Resources"}
            </div>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwhabistackcomdocs"}
              data-plasmic-override={overrides.httpswwwhabistackcomdocs}
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwhabistackcomdocs
              )}
              component={Link}
              href={"https://www.habistack.com/docs#" as const}
              platform={"nextjs"}
            >
              {"Documentation"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwhabistackcomblog"}
              data-plasmic-override={overrides.httpswwwhabistackcomblog}
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwhabistackcomblog
              )}
              component={Link}
              href={"https://www.habistack.com/blog#" as const}
              platform={"nextjs"}
            >
              {"Blog"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"supportfathymcom"}
              data-plasmic-override={overrides.supportfathymcom}
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.supportfathymcom
              )}
              component={Link}
              href={"support@fathym.com#" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Support"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__e8C2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6NUk
              )}
            >
              {"Company"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.a,
                projectcss.__wab_text,
                sty.link__lXfQk
              )}
              component={Link}
              href={"https://fathym.com/#" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Home"}
            </p.PlasmicLink>
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iwpD)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wX3Lh
                )}
              >
                {"Subscribe"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cy5Gi
                )}
              >
                {"Get the latest news and articles to your inbox every month."}
              </div>

              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                endIcon={
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"clear" as const}
                    size={"compact" as const}
                    startIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__n38Ec)}
                        role={"img"}
                      />
                    }
                  >
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___1ZgSa)}
                      role={"img"}
                    />
                  </Button>
                }
                fontSize={"small" as const}
                placeholder={"Your email" as const}
                showEndIcon={"showEndIcon" as const}
              />
            </p.Stack>
          ) : null}
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__znNa)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__jqjPm)}
      >
        <div className={classNames(projectcss.all, sty.freeBox___8JHt)}>
          <p.PlasmicLink
            className={classNames(
              projectcss.a,
              projectcss.__wab_text,
              sty.link___9Hi3
            )}
            component={Link}
            href={"" as const}
            platform={"nextjs"}
          >
            {"Copyright "}
          </p.PlasmicLink>

          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/habistack_com/images/copyrightIcon.png",
              fullWidth: 24,
              fullHeight: 24,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zEbF
            )}
          >
            {" 2022 Fathym. All rights reserved."}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__q2LUz)}
        >
          <IconLink
            data-plasmic-name={"fathymIt"}
            data-plasmic-override={overrides.fathymIt}
            className={classNames("__wab_instance", sty.fathymIt)}
            icon={
              <TwitterIconIcon
                className={classNames(projectcss.all, sty.svg__xyMPx)}
                role={"img"}
              />
            }
          />

          <IconLink
            data-plasmic-name={"httpsgithubcomfathym"}
            data-plasmic-override={overrides.httpsgithubcomfathym}
            className={classNames("__wab_instance", sty.httpsgithubcomfathym)}
            icon={
              <GithubIconIcon
                className={classNames(projectcss.all, sty.svg__uxqZo)}
                role={"img"}
              />
            }
          />

          <IconLink
            data-plasmic-name={"httpswwwfacebookcomFathymInc"}
            data-plasmic-override={overrides.httpswwwfacebookcomFathymInc}
            className={classNames(
              "__wab_instance",
              sty.httpswwwfacebookcomFathymInc
            )}
            icon={
              <FacebookIconIcon
                className={classNames(projectcss.all, sty.svg___4Ravz)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "iconLink",
    "httpsfathymcomtermsOfServices",
    "httpsfathymcomprivacyPolicy",
    "httpsfathymcomenterpriseAgreement",
    "httpswwwlowcodeunitcom",
    "httpswwwiotEnsemblecom",
    "httpswwwhabistackcom",
    "httpswwwproadjectcom",
    "httpswwwhabistackcomdocs",
    "httpswwwhabistackcomblog",
    "supportfathymcom",
    "textInput",
    "textbox",
    "button",
    "img",
    "fathymIt",
    "httpsgithubcomfathym",
    "httpswwwfacebookcomFathymInc"
  ],
  iconLink: ["iconLink"],
  httpsfathymcomtermsOfServices: ["httpsfathymcomtermsOfServices"],
  httpsfathymcomprivacyPolicy: ["httpsfathymcomprivacyPolicy"],
  httpsfathymcomenterpriseAgreement: ["httpsfathymcomenterpriseAgreement"],
  httpswwwlowcodeunitcom: ["httpswwwlowcodeunitcom"],
  httpswwwiotEnsemblecom: ["httpswwwiotEnsemblecom"],
  httpswwwhabistackcom: ["httpswwwhabistackcom"],
  httpswwwproadjectcom: ["httpswwwproadjectcom"],
  httpswwwhabistackcomdocs: ["httpswwwhabistackcomdocs"],
  httpswwwhabistackcomblog: ["httpswwwhabistackcomblog"],
  supportfathymcom: ["supportfathymcom"],
  textInput: ["textInput", "textbox", "button"],
  button: ["button"],
  img: ["img"],
  fathymIt: ["fathymIt"],
  httpsgithubcomfathym: ["httpsgithubcomfathym"],
  httpswwwfacebookcomFathymInc: ["httpswwwfacebookcomFathymInc"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  iconLink: typeof IconLink;
  httpsfathymcomtermsOfServices: "a";
  httpsfathymcomprivacyPolicy: "a";
  httpsfathymcomenterpriseAgreement: "a";
  httpswwwlowcodeunitcom: "a";
  httpswwwiotEnsemblecom: "a";
  httpswwwhabistackcom: "a";
  httpswwwproadjectcom: "a";
  httpswwwhabistackcomdocs: "a";
  httpswwwhabistackcomblog: "a";
  supportfathymcom: "a";
  textInput: typeof TextInput;
  button: typeof Button;
  img: typeof p.PlasmicImg;
  fathymIt: typeof IconLink;
  httpsgithubcomfathym: typeof IconLink;
  httpswwwfacebookcomFathymInc: typeof IconLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooter__Fetches;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconLink: makeNodeComponent("iconLink"),
    httpsfathymcomtermsOfServices: makeNodeComponent(
      "httpsfathymcomtermsOfServices"
    ),
    httpsfathymcomprivacyPolicy: makeNodeComponent(
      "httpsfathymcomprivacyPolicy"
    ),
    httpsfathymcomenterpriseAgreement: makeNodeComponent(
      "httpsfathymcomenterpriseAgreement"
    ),
    httpswwwlowcodeunitcom: makeNodeComponent("httpswwwlowcodeunitcom"),
    httpswwwiotEnsemblecom: makeNodeComponent("httpswwwiotEnsemblecom"),
    httpswwwhabistackcom: makeNodeComponent("httpswwwhabistackcom"),
    httpswwwproadjectcom: makeNodeComponent("httpswwwproadjectcom"),
    httpswwwhabistackcomdocs: makeNodeComponent("httpswwwhabistackcomdocs"),
    httpswwwhabistackcomblog: makeNodeComponent("httpswwwhabistackcomblog"),
    supportfathymcom: makeNodeComponent("supportfathymcom"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    img: makeNodeComponent("img"),
    fathymIt: makeNodeComponent("fathymIt"),
    httpsgithubcomfathym: makeNodeComponent("httpsgithubcomfathym"),
    httpswwwfacebookcomFathymInc: makeNodeComponent(
      "httpswwwfacebookcomFathymInc"
    ),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
